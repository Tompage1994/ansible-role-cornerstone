---
# tasks file for cornerstone:vm-vmware.yml

#
# -----------------------------------------------------------------------------
# Virtual Machine Tasks
# -----------------------------------------------------------------------------
#

# Check if we have an existing VM with this name.
- name: "[Cornerstone - VMWARE] Check for Existing VM"
  vmware_guest_facts:
    validate_certs: "{{ cornerstone_vmware_validate_certs }}"
    hostname: "{{ cornerstone_vmware_hostname }}"
    username: "{{ cornerstone_vmware_username }}"
    password: "{{ cornerstone_vmware_password }}"
    datacenter: "{{ cornerstone_vmware_datacenter }}"
    folder: "{{ cornerstone_vmware_vcsfolder }}"
    name: "{{ cornerstone_vm_name }}"
  register: vm_data
  ignore_errors: true

# Set the instance ID
- name: "[Cornerstone - VMWARE] Set Instance_ID (uuid) of Existing VM"
  set_fact:
    instance_id: "{{ vm_data.instance.instance_uuid }}"
  when: not vm_data.failed

- name: "[Cornerstone - VMWARE] Set instance_id to -99 if no instance, required for removal of instances"
  set_fact:
    instance_id: "-99"
  when: vm_data.failed

# Create the VM (baseline no data disks)
- name: "[Cornerstone - VMWARE] Create/Delete VM - {{ cornerstone_vm_name }}"
  vmware_guest:
    validate_certs: "{{ cornerstone_vmware_validate_certs }}"
    hostname: "{{ cornerstone_vmware_hostname }}"
    username: "{{ cornerstone_vmware_username }}"
    password: "{{ cornerstone_vmware_password }}"
    datacenter: "{{ cornerstone_vmware_datacenter }}"
    cluster: "{{ cornerstone_vmware_cluster }}"
    template: "{{ cornerstone_vmware_vmtemplate }}"
    folder: "{{ cornerstone_vmware_vcsfolder }}"
    datastore: "{{ cornerstone_vmware_datastore }}"
    name: "{{ cornerstone_vm_name }}"
    guest_id: "{{ cornerstone_vmware_instance_guest_id }}"
    hardware:
      memory_mb: "{{ cornerstone_vmware_memory | default(1024) }}"
      num_cpus: "{{ cornerstone_vmware_cores | default(1) }}"
      scsi: "{{ cornerstone_vmware_scsitype }}"
    disk: "{{ cornerstone_vmware_disks }}"
    networks:
      - name: "{{ cornerstone_vmware_network_name }}"
        type: static
        ip: "{{ cornerstone_vm_ip }}"
        gateway: "{{ cornerstone_vm_gateway }}"
        dns_servers: "{{ cornerstone_vmware_dns_servers }}"
        netmask: "{{ cornerstone_vmware_netmask }}"
        device_type: "vmxnet3"
        dvswitch_name: "{{ cornerstone_vmware_dvswitch_name }}"
    customization: "{{ cornerstone_vmware_customization }}"
    wait_for_ip_address: true
    wait_for_customization: true
    state: "{{ cornerstone_vm_state }}"
  register: output_vm_"{{ cornerstone_vm_name }}"
